var documenterSearchIndex = {"docs":
[{"location":"getting_started/#Getting-Started-with-ChromeDevToolsLite.jl","page":"Getting Started","title":"Getting Started with ChromeDevToolsLite.jl","text":"","category":"section"},{"location":"getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"ChromeDevToolsLite\")","category":"page"},{"location":"getting_started/#Basic-Usage","page":"Getting Started","title":"Basic Usage","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Here's a simple example that demonstrates the core functionality:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using ChromeDevToolsLite\n\n# Connect to browser (enable verbose mode for debugging)\nclient = connect_browser(verbose=true)\n\ntry\n    # Navigate to a website\n    goto(client, \"https://example.com\")\n\n    # Find and interact with elements using JavaScript\n    evaluate(client, \"\"\"\n        const button = document.querySelector('#submit-button');\n        if (button) button.click();\n\n        const searchInput = document.querySelector('#search');\n        if (searchInput) searchInput.value = 'search query';\n    \"\"\")\n\n    # Take a screenshot\n    screenshot(client, verbose=true)\nfinally\n    # Clean up\n    close(client)\nend","category":"page"},{"location":"getting_started/#Key-Concepts","page":"Getting Started","title":"Key Concepts","text":"","category":"section"},{"location":"getting_started/#Browser-Management","page":"Getting Started","title":"Browser Management","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"A WebSocket connection to Chrome DevTools Protocol\nEach connection can control a Chrome browser instance\nSupports page navigation, JavaScript evaluation, and screenshots","category":"page"},{"location":"getting_started/#Page-Navigation","page":"Getting Started","title":"Page Navigation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Use goto to navigate to URLs\nUse evaluate to run JavaScript code\nUse content to retrieve the page's HTML","category":"page"},{"location":"getting_started/#DOM-Interaction","page":"Getting Started","title":"DOM Interaction","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Interact with elements using JavaScript via evaluate\nQuery elements using standard CSS selectors\nModify element properties and trigger events\nEnable verbose mode for debugging output","category":"page"},{"location":"getting_started/#Debugging","page":"Getting Started","title":"Debugging","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Use verbose flag for detailed logging:\nclient = connect_browser(verbose=true)\nresult = evaluate(client, \"document.querySelector('#button').click()\")\nCheck operation results and error messages\nMonitor browser console output","category":"page"},{"location":"getting_started/#Error-Handling","page":"Getting Started","title":"Error Handling","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The package includes error handling for:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Connection issues\nNavigation failures\nJavaScript evaluation errors","category":"page"},{"location":"getting_started/#Best-Practices","page":"Getting Started","title":"Best Practices","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Always use try-finally for cleanup:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"try\n    # Your code here\nfinally\n    close(client)\nend","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Use verbose mode during development:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Enable verbose mode for detailed logging\nclient = connect_browser(verbose=true)\nresult = evaluate(client, \"\"\"\n    const element = document.querySelector('#slow-element');\n    if (element) element.click();\n\"\"\", verbose=true)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Handle errors gracefully:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"try\n    result = evaluate(client, \"\"\"\n        const element = document.querySelector('#maybe-exists');\n        return element ? element.click() : null;\n    \"\"\")\ncatch e\n    @warn \"Element interaction failed\" exception=e\n    rethrow(e)\nend","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Working with Multiple Elements:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Find and process multiple elements\nelements_data = evaluate(client, \"\"\"\n    const items = document.querySelectorAll('.item');\n    return Array.from(items).map(item => ({\n        visible: window.getComputedStyle(item).display !== 'none',\n        text: item.textContent,\n        testid: item.getAttribute('data-testid')\n    }));\n\"\"\")\nfor item in JSON.parse(elements_data)\n    if item[\"visible\"]\n        println(\"Item $(item[\"testid\"]): $(item[\"text\"])\")\n    end\nend","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Form Interactions:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Fill out a form\nevaluate(client, \"\"\"\n    const nameInput = document.querySelector('#name');\n    if (nameInput) nameInput.value = 'John Doe';\n\n    const colorSelect = document.querySelector('#color');\n    if (colorSelect) colorSelect.value = 'blue';\n\n    const submitButton = document.querySelector('button[type='submit']');\n    if (submitButton) submitButton.click();\n\"\"\")\n\n# Verify submission\nresult = evaluate(client, \"\"\"\n    const resultElement = document.querySelector('#result');\n    return resultElement ? resultElement.textContent : '';\n\"\"\")\n@assert contains(result, \"John Doe\")","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Screenshots:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Full page screenshot\nscreenshot(client, verbose=true)\n\n# Element-specific screenshot (not currently supported)","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This guide showcases practical examples demonstrating ChromeDevToolsLite features. All examples can be found in the examples/ directory.","category":"page"},{"location":"examples/#Basic-Connection","page":"Examples","title":"Basic Connection","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ChromeDevToolsLite\n\nprintln(\"Starting basic connection example...\")\nclient = connect_browser(verbose=true)\n\ntry\n    # Basic navigation\n    goto(client, \"https://example.com\")\n\n    # Get page title using JavaScript\n    title = evaluate(client, \"document.title\")\n    println(\"Page title: $title\")\nfinally\n    close(client)\nend","category":"page"},{"location":"examples/#Page-Operations","page":"Examples","title":"Page Operations","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Get and display page content\nhtml_content = content(client)\nprintln(\"First 100 chars of content: \", html_content[1:min(100, length(html_content))])\n\n# Take a screenshot\nscreenshot(client, verbose=true)\nprintln(\"Screenshot saved (check current directory for 'screenshot.png')\")","category":"page"},{"location":"examples/#Element-Interactions","page":"Examples","title":"Element Interactions","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Fill in form fields\nevaluate(client, \"\"\"\n    document.querySelector('input[name=\"custname\"]').value = 'John Doe';\n    document.querySelector('input[value=\"medium\"]').click();\n    document.querySelector('input[value=\"bacon\"]').click();\n    document.querySelector('textarea[name=\"comments\"]').value = 'Please ring doorbell twice';\n\"\"\")\n\n# Verify inputs\nname = evaluate(client, \"document.querySelector('input[name=\\\"custname\\\"]').value\")\nsize = evaluate(client, \"document.querySelector('input[name=\\\"size\\\"]:checked').value\")","category":"page"},{"location":"examples/#Form-Automation","page":"Examples","title":"Form Automation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Complex form handling with JSON verification\nform_data = evaluate(client, \"\"\"\n    JSON.stringify({\n        name: document.querySelector('input[name=\"custname\"]').value,\n        size: document.querySelector('input[name=\"size\"]:checked').value,\n        toppings: Array.from(document.querySelectorAll('input[name=\"topping\"]:checked'))\n            .map(el => el.value)\n    })\n\"\"\")","category":"page"},{"location":"examples/#Advanced-Automation","page":"Examples","title":"Advanced Automation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Dynamic DOM manipulation\nevaluate(client, \"\"\"\n    // Create new elements\n    const newHeader = document.createElement('h2');\n    newHeader.textContent = 'Dynamically Added Content';\n    document.body.insertBefore(newHeader, document.body.firstChild);\n\n    // Modify existing elements\n    const paragraphs = document.getElementsByTagName('p');\n    Array.from(paragraphs).forEach((p, index) => {\n        p.style.color = index % 2 ? 'blue' : 'green';\n        p.style.padding = '10px';\n    });\n\"\"\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ChromeDevToolsLite","category":"page"},{"location":"#ChromeDevToolsLite","page":"Home","title":"ChromeDevToolsLite","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ChromeDevToolsLite.jl is a minimal Julia package for browser automation using the Chrome DevTools Protocol (CDP). It provides direct access to CDP commands with a lightweight interface.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Direct WebSocket connection to Chrome DevTools Protocol\nBasic page navigation and JavaScript evaluation\nDOM manipulation via JavaScript\nScreenshot capabilities\nMinimal overhead and dependencies","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using ChromeDevToolsLite\n\n# Connect to Chrome running with --remote-debugging-port=9222\nclient = connect_browser()\n\ntry\n    # Navigate to a page\n    goto(client, \"https://example.com\")\n\n    # Get page content\n    page_content = content(client)\n\n    # Find and interact with elements using JavaScript\n    evaluate(client, \"\"\"\n        const button = document.querySelector('#submit-button');\n        if (button) button.click();\n    \"\"\")\n\n    # Take a screenshot\n    screenshot(client)\nfinally\n    close(client)\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Getting Started with ChromeDevToolsLite.jl guide for more examples.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"api/api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/api/#Core-Functions","page":"API Reference","title":"Core Functions","text":"","category":"section"},{"location":"api/api/#Browser-Connection","page":"API Reference","title":"Browser Connection","text":"","category":"section"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"connect_browser(; verbose=false)","category":"page"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"Connects to a Chrome browser instance running with remote debugging enabled.","category":"page"},{"location":"api/api/#Page-Navigation-and-Content","page":"API Reference","title":"Page Navigation and Content","text":"","category":"section"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"goto(client, url)","category":"page"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"Navigates to the specified URL.","category":"page"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"content(client)","category":"page"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"Gets the HTML content of the current page.","category":"page"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"evaluate(client, script)","category":"page"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"Executes JavaScript code on the current page and returns the result.","category":"page"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"screenshot(client; verbose=false)","category":"page"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"Takes a screenshot of the current page.","category":"page"},{"location":"api/api/#Resource-Management","page":"API Reference","title":"Resource Management","text":"","category":"section"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"close(client)","category":"page"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"Closes the connection to the browser.","category":"page"},{"location":"api/api/#Best-Practices","page":"API Reference","title":"Best Practices","text":"","category":"section"},{"location":"api/api/#Error-Handling","page":"API Reference","title":"Error Handling","text":"","category":"section"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"try\n    client = connect_browser(verbose=true)\n    try\n        goto(client, \"https://example.com\")\n        result = evaluate(client, \"document.title\")\n        println(\"Page title: $result\")\n    finally\n        close(client)\n    end\ncatch e\n    @warn \"Browser automation failed\" exception=e\n    rethrow(e)\nend","category":"page"},{"location":"api/api/#JavaScript-Evaluation","page":"API Reference","title":"JavaScript Evaluation","text":"","category":"section"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"# Simple evaluation\ntitle = evaluate(client, \"document.title\")\n\n# Complex DOM operations\nevaluate(client, \"\"\"\n    const button = document.querySelector('#submit');\n    if (button) {\n        button.click();\n        return true;\n    }\n    return false;\n\"\"\")\n\n# Form handling\nevaluate(client, \"\"\"\n    const form = document.querySelector('form');\n    if (form) {\n        form.querySelector('input[name=\"username\"]').value = 'user123';\n        form.querySelector('input[name=\"password\"]').value = 'pass123';\n        form.submit();\n        return true;\n    }\n    return false;\n\"\"\")","category":"page"},{"location":"api/api/#Screenshots","page":"API Reference","title":"Screenshots","text":"","category":"section"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"# Take a full page screenshot\nscreenshot(client, verbose=true)","category":"page"}]
}
