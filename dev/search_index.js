var documenterSearchIndex = {"docs":
[{"location":"error_types/#Error-Types","page":"Error Types","title":"Error Types","text":"","category":"section"},{"location":"error_types/","page":"Error Types","title":"Error Types","text":"ChromeDevToolsLite defines several error types for different failure scenarios:","category":"page"},{"location":"error_types/","page":"Error Types","title":"Error Types","text":"ElementNotFoundError\nNavigationError\nEvaluationError\nTimeoutError\nConnectionError","category":"page"},{"location":"error_types/#ChromeDevToolsLite.ElementNotFoundError","page":"Error Types","title":"ChromeDevToolsLite.ElementNotFoundError","text":"ElementNotFoundError\n\nThrown when an element cannot be found in the DOM using the specified selector.\n\n\n\n\n\n","category":"type"},{"location":"error_types/#ChromeDevToolsLite.NavigationError","page":"Error Types","title":"ChromeDevToolsLite.NavigationError","text":"NavigationError\n\nThrown when a page navigation fails or times out.\n\n\n\n\n\n","category":"type"},{"location":"error_types/#ChromeDevToolsLite.EvaluationError","page":"Error Types","title":"ChromeDevToolsLite.EvaluationError","text":"EvaluationError\n\nThrown when JavaScript evaluation in the browser fails.\n\n\n\n\n\n","category":"type"},{"location":"error_types/#ChromeDevToolsLite.TimeoutError","page":"Error Types","title":"ChromeDevToolsLite.TimeoutError","text":"TimeoutError\n\nThrown when an operation exceeds its time limit.\n\n\n\n\n\n","category":"type"},{"location":"error_types/#ChromeDevToolsLite.ConnectionError","page":"Error Types","title":"ChromeDevToolsLite.ConnectionError","text":"ConnectionError\n\nThrown when there are issues with the WebSocket connection.\n\n\n\n\n\n","category":"type"},{"location":"error_types/#Error-Handling-Examples","page":"Error Types","title":"Error Handling Examples","text":"","category":"section"},{"location":"error_types/","page":"Error Types","title":"Error Types","text":"# Handle element not found\ntry\n    element = ElementHandle(client, \"#non-existent\")\ncatch e\n    if e isa ElementNotFoundError\n        @warn \"Element not found\" selector=\"#non-existent\"\n    end\nend\n\n# Handle navigation errors\ntry\n    goto(client, \"invalid-url\")\ncatch e\n    if e isa NavigationError\n        @error \"Navigation failed\" url=\"invalid-url\" reason=e.msg\n    end\nend\n\n# Handle evaluation errors\ntry\n    result = evaluate(client, \"invalid javascript\")\ncatch e\n    if e isa EvaluationError\n        @error \"JavaScript evaluation failed\" reason=e.msg\n    end\nend\n\n# Handle timeouts\ntry\n    element = ElementHandle(client, \"#slow-loading\", timeout=1.0)\ncatch e\n    if e isa TimeoutError\n        @warn \"Operation timed out\" operation=\"element selection\"\n    end\nend\n\n# Handle connection errors\ntry\n    client = connect_browser()\ncatch e\n    if e isa ConnectionError\n        @error \"Failed to connect to browser\" reason=e.msg\n    end\nend","category":"page"},{"location":"api/utilities/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"api/utilities/#Resource-Management","page":"Utilities","title":"Resource Management","text":"","category":"section"},{"location":"api/utilities/#Best-Practices","page":"Utilities","title":"Best Practices","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"# Always use try-finally for proper cleanup\nclient = connect_browser()\n\ntry\n    # Your page operations here\n    goto(client, \"https://example.com\")\n    element = ElementHandle(client, \".content\")\nfinally\n    # Clean up\n    close(client)\nend","category":"page"},{"location":"api/utilities/#Memory-Management-Tips","page":"Utilities","title":"Memory Management Tips","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"Always close the client connection when done\nUse shorter timeouts for faster failure detection\nEnable verbose logging during development for better debugging","category":"page"},{"location":"getting_started/#Getting-Started-with-ChromeDevToolsLite.jl","page":"Getting Started","title":"Getting Started with ChromeDevToolsLite.jl","text":"","category":"section"},{"location":"getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"ChromeDevToolsLite\")","category":"page"},{"location":"getting_started/#Basic-Usage","page":"Getting Started","title":"Basic Usage","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Here's a simple example that demonstrates the core functionality:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using ChromeDevToolsLite\n\n# Connect to browser (enable verbose mode for debugging)\nclient = connect_browser(verbose=true)\n\n# Navigate to a website\ngoto(client, \"https://example.com\")\n\n# Find and interact with elements\nelement = ElementHandle(client, \"#submit-button\", verbose=true)\nclick(element, verbose=true)\n\n# Fill out a form\ninput = ElementHandle(client, \"#search\", verbose=true)\ntype_text(input, \"search query\", verbose=true)\n\n# Take a screenshot\nscreenshot(client, verbose=true)\n\n# Clean up\nclose(client)","category":"page"},{"location":"getting_started/#Key-Concepts","page":"Getting Started","title":"Key Concepts","text":"","category":"section"},{"location":"getting_started/#Browser-Management","page":"Getting Started","title":"Browser Management","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"A WebSocket connection to Chrome DevTools Protocol\nEach connection can control a Chrome browser instance\nSupports page navigation, element interaction, and JavaScript evaluation","category":"page"},{"location":"getting_started/#Page-Navigation","page":"Getting Started","title":"Page Navigation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Use goto to navigate to URLs\nUse ElementHandle to find elements\nUse content to retrieve the page's HTML","category":"page"},{"location":"getting_started/#Element-Interaction","page":"Getting Started","title":"Element Interaction","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Find elements using CSS selectors with ElementHandle\nInteract using methods like click, type_text\nCheck element state with is_visible, get_text\nEnable verbose mode for debugging: ElementHandle(client, selector, verbose=true)","category":"page"},{"location":"getting_started/#Debugging","page":"Getting Started","title":"Debugging","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Use verbose flag for detailed logging:\nclient = connect_browser(verbose=true)\nelement = ElementHandle(client, \"#button\", verbose=true)\nclick(element, verbose=true)\nCheck operation results and error messages\nMonitor browser console output","category":"page"},{"location":"getting_started/#Error-Handling","page":"Getting Started","title":"Error Handling","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The package includes error handling for:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Connection issues\nNavigation failures\nElement interaction failures","category":"page"},{"location":"getting_started/#Best-Practices","page":"Getting Started","title":"Best Practices","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Always close resources:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"try\n    # Your code here\nfinally\n    close(client)\nend","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Use verbose mode during development:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Enable verbose mode for detailed logging\nclient = connect_browser(verbose=true)\nelement = ElementHandle(client, \"#slow-element\", verbose=true)\nif !isnothing(element)\n    click(element, verbose=true)\nend","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Handle errors gracefully:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"try\n    element = ElementHandle(client, \"#maybe-exists\", verbose=true)\n    if !isnothing(element)\n        click(element, verbose=true)\n    end\ncatch e\n    @warn \"Element not found or interaction failed\" exception=e\n    rethrow(e)\nend","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Working with Multiple Elements:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Find multiple elements\nitems = [ElementHandle(client, \".item\", verbose=true) for _ in 1:3]\nfor item in items\n    if is_visible(item)\n        text = get_text(item)\n        testid = get_attribute(item, \"data-testid\")\n        println(\"Item $testid: $text\")\n    end\nend","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Form Interactions:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Fill out a form\nname_input = ElementHandle(client, \"#name\", verbose=true)\ntype_text(name_input, \"John Doe\", verbose=true)\n\ncolor_select = ElementHandle(client, \"#color\", verbose=true)\nselect_option(color_select, \"blue\", verbose=true)\n\nsubmit_button = ElementHandle(client, \"button[type='submit']\", verbose=true)\nclick(submit_button, verbose=true)\n\n# Verify submission\nresult = ElementHandle(client, \"#result\", verbose=true)\n@assert contains(get_text(result), \"John Doe\")","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Screenshots:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# From examples/16_screenshot_comprehensive_test.jl\n# Full page screenshot\nscreenshot(client, verbose=true)\n\n# Element-specific screenshot\nheader = ElementHandle(client, \"header\", verbose=true)\nscreenshot(header, verbose=true)","category":"page"},{"location":"api/browser/#Browser","page":"Browser","title":"Browser","text":"","category":"section"},{"location":"api/browser/","page":"Browser","title":"Browser","text":"connect_browser","category":"page"},{"location":"api/browser/#ChromeDevToolsLite.connect_browser","page":"Browser","title":"ChromeDevToolsLite.connect_browser","text":"connect_browser(\n    endpoint::String = \"http://localhost:9222\";\n    max_retries::Int = MAX_RETRIES,\n    retry_delay::Real = RETRY_DELAY,\n    verbose::Bool = false\n\n)\n\nConnects to Chrome browser at the given debugging endpoint with enhanced error handling.\n\nArguments\n\nendpoint::String: The URL of the Chrome debugging endpoint. Eg, http://localhost:9222.\nmax_retries::Int: The maximum number of retries to check for Chrome.\nretry_delay::Real: The delay between retries in seconds.\nverbose::Bool: Whether to print verbose debug information.\n\n\n\n\n\n","category":"function"},{"location":"api/browser/#Examples","page":"Browser","title":"Examples","text":"","category":"section"},{"location":"api/browser/","page":"Browser","title":"Browser","text":"# Basic browser connection\nclient = connect_browser()\n\ntry\n    # Navigate to a website using high-level function\n    goto(client, \"https://example.com\")\n\n    # Get page content\n    html_content = content(client)\n\n    # Take screenshot\n    screenshot(client)\nfinally\n    close(client)\nend","category":"page"},{"location":"api/browser/#Error-Handling","page":"Browser","title":"Error Handling","text":"","category":"section"},{"location":"api/browser/","page":"Browser","title":"Browser","text":"Browser operations can throw various exceptions. See Error Types in the Types section for details.","category":"page"},{"location":"api/browser/#Usage-Notes","page":"Browser","title":"Usage Notes","text":"","category":"section"},{"location":"api/browser/","page":"Browser","title":"Browser","text":"Ensure Chrome is running in debug mode before connecting\nAlways close the connection when done\nUse verbose mode for debugging connection issues","category":"page"},{"location":"api/browser/#Configuration","page":"Browser","title":"Configuration","text":"","category":"section"},{"location":"api/browser/","page":"Browser","title":"Browser","text":"The browser connection can be configured with:","category":"page"},{"location":"api/browser/","page":"Browser","title":"Browser","text":"endpoint: The Chrome DevTools Protocol endpoint (default: \"http://localhost:9222\")\nverbose: Enable detailed logging (default: false)","category":"page"},{"location":"contributing/#Contributing-to-ChromeDevToolsLite.jl","page":"Contributing","title":"Contributing to ChromeDevToolsLite.jl","text":"","category":"section"},{"location":"contributing/#Development-Setup","page":"Contributing","title":"Development Setup","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Clone the repository:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"git clone https://github.com/svilupp/ChromeDevToolsLite.jl\ncd ChromeDevToolsLite.jl","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Install dependencies:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"using Pkg\nPkg.develop(path=\".\")","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Install Chromium (required for testing):","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"# Ubuntu/Debian\nsudo apt-get install chromium-browser\n\n# macOS\nbrew install chromium","category":"page"},{"location":"contributing/#Project-Structure","page":"Contributing","title":"Project Structure","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"src/: Source code\ntypes/: Core type definitions\ncdp/: Chrome DevTools Protocol handling\nutils/: Utility functions\ntest/: Test suite\nexamples/: Example scripts\ndocs/: Documentation","category":"page"},{"location":"contributing/#Running-Tests","page":"Contributing","title":"Running Tests","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"using Pkg\nPkg.test(\"ChromeDevToolsLite\")","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Note: Some tests require a running Chromium instance with remote debugging enabled.","category":"page"},{"location":"contributing/#Code-Style-Guidelines","page":"Contributing","title":"Code Style Guidelines","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Follow Julia style guide\nUse meaningful variable names\nAdd docstrings for all public functions\nInclude examples in docstrings with verbose flag options\nWrite unit tests for new functionality\nUse verbose flag for debugging operations","category":"page"},{"location":"contributing/#Adding-New-Features","page":"Contributing","title":"Adding New Features","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Create a new branch:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"git checkout -b feature/your-feature-name","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Implement your changes\nAdd tests\nUpdate documentation\nSubmit a pull request","category":"page"},{"location":"contributing/#Common-Development-Tasks","page":"Contributing","title":"Common Development Tasks","text":"","category":"section"},{"location":"contributing/#Adding-a-New-CDP-Command","page":"Contributing","title":"Adding a New CDP Command","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Add command definition in appropriate type file\nImplement error handling and verbose logging\nAdd unit tests with verbose mode coverage\nAdd example usage with verbose options\nUpdate documentation","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Example from our codebase:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"# From examples/14_evaluate_handle_test.jl\n# Implementation of evaluate_handle with verbose logging\nelement = ElementHandle(client, \"#myButton\", verbose=true)\nresult = evaluate_handle(element, \"el => el.textContent\", verbose=true)","category":"page"},{"location":"contributing/#Testing-Tips","page":"Contributing","title":"Testing Tips","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Use MockWebSocket for CDP tests\nTest error conditions and timeouts\nVerify edge cases\nTest with both verbose=true and verbose=false","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Example test pattern:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"# Example error handling with verbose logging\ntry\n    element = ElementHandle(client, \"#non-existent\", verbose=true)\n    if !isnothing(element)\n        click(element, verbose=true)\n    end\ncatch e\n    println(\"Element interaction failed: \", e)\nend","category":"page"},{"location":"contributing/#Documentation","page":"Contributing","title":"Documentation","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Build documentation locally:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"using Documenter\ninclude(\"docs/make.jl\")","category":"page"},{"location":"contributing/#Getting-Help","page":"Contributing","title":"Getting Help","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Open an issue for bugs\nDiscuss major changes in issues first\nJoin Julia Slack for questions","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This guide showcases practical examples from our test suite demonstrating various ChromeDevToolsLite features.","category":"page"},{"location":"examples/#Browser-Connection","page":"Examples","title":"Browser Connection","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Connect to Chrome DevTools with verbose logging for debugging\nclient = connect_browser(verbose=true)\n\ntry\n    goto(client, \"https://example.com\")\n    content_result = content(client)\n    @assert contains(content_result, \"<title>Example Domain</title>\")\nfinally\n    close(client)\nend","category":"page"},{"location":"examples/#Form-Filling","page":"Examples","title":"Form Filling","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Fill out a complex form with verbose logging\nform_data = Dict(\n    \"#name\" => \"John Doe\",\n    \"#email\" => \"john@example.com\",\n    \"#country\" => \"US\",\n    \"#terms\" => true\n)\n\nfor (selector, value) in form_data\n    element = ElementHandle(client, selector, verbose=true)\n    if value isa Bool\n        value ? check(element, verbose=true) : uncheck(element, verbose=true)\n    elseif selector == \"#country\"\n        select_option(element, value, verbose=true)\n    else\n        type_text(element, value, verbose=true)\n    end\nend","category":"page"},{"location":"examples/#Working-with-Elements","page":"Examples","title":"Working with Elements","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Find and interact with elements\nelement = ElementHandle(client, \"#submit-button\", verbose=true)\nclick(element, verbose=true)\n\n# Find and interact with multiple elements\nitems = [ElementHandle(client, item, verbose=true) for item in [\"#item1\", \"#item2\", \"#item3\"]]\nfor element in items\n    if is_visible(element)\n        text = get_text(element)\n        testid = get_attribute(element, \"data-testid\")\n        println(\"Item $testid: $text\")\n    end\nend","category":"page"},{"location":"examples/#Dynamic-Content-Handling","page":"Examples","title":"Dynamic Content Handling","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Check element visibility and interact with verbose logging\nelement = ElementHandle(client, \"#dynamic-content\", verbose=true)\nif !isnothing(element) && is_visible(element)\n    click(element, verbose=true)\nend","category":"page"},{"location":"examples/#Taking-Screenshots","page":"Examples","title":"Taking Screenshots","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Full page screenshot\nscreenshot(client, verbose=true)\n\n# Element-specific screenshot\nspecial_item = ElementHandle(client, \".item.special\", verbose=true)\nscreenshot(special_item, verbose=true)","category":"page"},{"location":"examples/#Element-Interaction-and-Form-Handling","page":"Examples","title":"Element Interaction and Form Handling","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Enable verbose mode for detailed operation logging\ncheckbox = ElementHandle(client, \"#notifications\", verbose=true)\ncheck(checkbox, verbose=true)\n@assert evaluate_handle(checkbox, \"el => el.checked\", verbose=true) \"Checkbox should be checked\"\n\n# Form submission\ninput = ElementHandle(client, \"#name\", verbose=true)\ntype_text(input, \"John Doe\", verbose=true)\n\nselect = ElementHandle(client, \"#color\", verbose=true)\nselect_option(select, \"blue\", verbose=true)\n\nsubmit = ElementHandle(client, \"button[type='submit']\", verbose=true)\nclick(submit, verbose=true)\n\n# Multiple element handling\nitems = [ElementHandle(client, item, verbose=true) for item in [\"#item1\", \"#item2\", \"#item3\"]]\nfor element in items\n    if is_visible(element)\n        text = get_text(element)\n        testid = get_attribute(element, \"data-testid\")\n        println(\"Item $testid: $text\")\n    end\nend","category":"page"},{"location":"api/element/#Element-Operations","page":"Element","title":"Element Operations","text":"","category":"section"},{"location":"api/element/","page":"Element","title":"Element","text":"ElementHandle\nclick\ntype_text\ncheck\nuncheck\nselect_option\nis_visible\nget_text\nget_attribute\nevaluate_handle","category":"page"},{"location":"api/element/#ChromeDevToolsLite.ElementHandle","page":"Element","title":"ChromeDevToolsLite.ElementHandle","text":"ElementHandle\n\nRepresents a handle to a DOM element in the browser.\n\n\n\n\n\n","category":"type"},{"location":"api/element/#ChromeDevToolsLite.click","page":"Element","title":"ChromeDevToolsLite.click","text":"click(element::ElementHandle; options=Dict())\n\nClick an element.\n\n\n\n\n\n","category":"function"},{"location":"api/element/#ChromeDevToolsLite.type_text","page":"Element","title":"ChromeDevToolsLite.type_text","text":"type_text(element::ElementHandle, text::String; options=Dict())\n\nType text into an element.\n\n\n\n\n\n","category":"function"},{"location":"api/element/#ChromeDevToolsLite.check","page":"Element","title":"ChromeDevToolsLite.check","text":"check(element::ElementHandle; options=Dict())\n\nCheck a checkbox or radio button element.\n\n\n\n\n\n","category":"function"},{"location":"api/element/#ChromeDevToolsLite.uncheck","page":"Element","title":"ChromeDevToolsLite.uncheck","text":"uncheck(element::ElementHandle; options=Dict())\n\nUncheck a checkbox element.\n\n\n\n\n\n","category":"function"},{"location":"api/element/#ChromeDevToolsLite.select_option","page":"Element","title":"ChromeDevToolsLite.select_option","text":"select_option(element::ElementHandle, value::String; options=Dict())\n\nSelect an option in a select element by value.\n\n\n\n\n\n","category":"function"},{"location":"api/element/#ChromeDevToolsLite.is_visible","page":"Element","title":"ChromeDevToolsLite.is_visible","text":"is_visible(element::ElementHandle) -> Bool\n\nCheck if an element is visible.\n\n\n\n\n\n","category":"function"},{"location":"api/element/#ChromeDevToolsLite.get_text","page":"Element","title":"ChromeDevToolsLite.get_text","text":"get_text(element::ElementHandle) -> String\n\nGet the text content of an element.\n\n\n\n\n\n","category":"function"},{"location":"api/element/#ChromeDevToolsLite.get_attribute","page":"Element","title":"ChromeDevToolsLite.get_attribute","text":"get_attribute(element::ElementHandle, name::String) -> Union{String, Nothing}\n\nGet the value of an attribute on an element.\n\n\n\n\n\n","category":"function"},{"location":"api/element/#ChromeDevToolsLite.evaluate_handle","page":"Element","title":"ChromeDevToolsLite.evaluate_handle","text":"evaluate_handle(client::WSClient, expression::String; verbose::Bool=false) -> Any\n\nEvaluate JavaScript in the page context and return a handle to the result. Useful for evaluating expressions that return DOM elements or complex objects.\n\nArguments\n\nclient::WSClient: The WebSocket client to use\nexpression::String: JavaScript expression to evaluate\nverbose::Bool: Enable verbose logging (default: false)\n\nReturns\n\nAny: A handle to the evaluated result, typically a Dict containing object reference\n\nThrows\n\nEvaluationError: If JavaScript evaluation fails\n\n\n\n\n\nevaluate_handle(element::ElementHandle, expression::String) -> Any\n\nEvaluate JavaScript expression in the context of the element. Assumed the element is variable el.\n\n\n\n\n\n","category":"function"},{"location":"api/element/#Examples","page":"Element","title":"Examples","text":"","category":"section"},{"location":"api/element/","page":"Element","title":"Element","text":"# Basic element interactions\nelement = ElementHandle(client, \"#my-button\")\n\n# Click operations\nsuccess = click(element)\n\n# Form interactions\ninput = ElementHandle(client, \"#username\")\ntype_text(input, \"user123\")\n\n# Checkbox handling\ncheckbox = ElementHandle(client, \"#terms\")\ncheck(checkbox)\nuncheck(checkbox)\n\n# Select dropdown\nselect = ElementHandle(client, \"#country\")\nselect_option(select, \"US\")\n\n# Element state\nif is_visible(element)\n    text = get_text(element)\n    class_attr = get_attribute(element, \"class\")\nend\n\n# JavaScript evaluation\nresult = evaluate_handle(element, \"el => el.getBoundingClientRect()\")","category":"page"},{"location":"api/element/#Error-Handling","page":"Element","title":"Error Handling","text":"","category":"section"},{"location":"api/element/","page":"Element","title":"Element","text":"Element operations can throw various exceptions. See Error Types in the Types section for details.","category":"page"},{"location":"api/element/#Element-Selection","page":"Element","title":"Element Selection","text":"","category":"section"},{"location":"api/element/","page":"Element","title":"Element","text":"Elements are selected using standard CSS selectors:","category":"page"},{"location":"api/element/","page":"Element","title":"Element","text":"# ID selector\nelement = ElementHandle(client, \"#myId\")\n\n# Class selector\nelement = ElementHandle(client, \".myClass\")\n\n# Complex selectors\nelement = ElementHandle(client, \"div.container > button[type='submit']\")","category":"page"},{"location":"api/element/#Logging","page":"Element","title":"Logging","text":"","category":"section"},{"location":"api/element/","page":"Element","title":"Element","text":"All element operations support verbose logging through the verbose flag:","category":"page"},{"location":"api/element/","page":"Element","title":"Element","text":"element = ElementHandle(client, \"#myId\", verbose=true)\nclick(element, verbose=true)","category":"page"},{"location":"api/element/#Best-Practices","page":"Element","title":"Best Practices","text":"","category":"section"},{"location":"api/element/","page":"Element","title":"Element","text":"Always check operation success:","category":"page"},{"location":"api/element/","page":"Element","title":"Element","text":"if !click(element)\n    @warn \"Click operation failed\"\nend","category":"page"},{"location":"api/element/","page":"Element","title":"Element","text":"Use proper error handling:","category":"page"},{"location":"api/element/","page":"Element","title":"Element","text":"try\n    success = type_text(element, \"Hello\")\n    if !success\n        @warn \"Failed to type text\"\n    end\ncatch e\n    @error \"Error during text input\" exception=e\nend","category":"page"},{"location":"api/element/","page":"Element","title":"Element","text":"Verify element visibility before interaction:","category":"page"},{"location":"api/element/","page":"Element","title":"Element","text":"if is_visible(element)\n    click(element)\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ChromeDevToolsLite","category":"page"},{"location":"#ChromeDevToolsLite","page":"Home","title":"ChromeDevToolsLite","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ChromeDevToolsLite.jl is a minimal Julia package for browser automation using the Chrome DevTools Protocol (CDP). It provides direct access to CDP commands with a lightweight interface.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Direct WebSocket connection to Chrome DevTools Protocol\nBasic page navigation and JavaScript evaluation\nElement interaction (click, type)\nScreenshot capabilities\nMinimal overhead and dependencies","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using ChromeDevToolsLite\n\n# Connect to Chrome running with --remote-debugging-port=9222\nclient = connect_browser()\n\ntry\n    # Navigate to a page\n    goto(client, \"https://example.com\")\n\n    # Get page content\n    page_content = content(client)\n\n    # Find and interact with elements\n    element = ElementHandle(client, \"#submit-button\")\n    click(element)\n\n    # Take a screenshot\n    screenshot(client)\nfinally\n    close(client)\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Getting Started with ChromeDevToolsLite.jl guide for more examples.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"api/cdp/#Chrome-DevTools-Protocol-(CDP)","page":"CDP","title":"Chrome DevTools Protocol (CDP)","text":"","category":"section"},{"location":"api/cdp/","page":"CDP","title":"CDP","text":"extract_cdp_result\nextract_element_result","category":"page"},{"location":"api/cdp/#ChromeDevToolsLite.extract_cdp_result","page":"CDP","title":"ChromeDevToolsLite.extract_cdp_result","text":"extract_cdp_result(response::Dict, path::Vector{String}=[\"result\", \"result\", \"value\"])\n\nExtract values from CDP responses with configurable path traversal. Returns the extracted value or nothing if the path doesn't exist.\n\n\n\n\n\n","category":"function"},{"location":"api/cdp/#ChromeDevToolsLite.extract_element_result","page":"CDP","title":"ChromeDevToolsLite.extract_element_result","text":"extract_element_result(response::Dict)\n\nExtract element-specific results from CDP responses.\n\n\n\n\n\n","category":"function"},{"location":"api/cdp/#Usage","page":"CDP","title":"Usage","text":"","category":"section"},{"location":"api/cdp/","page":"CDP","title":"CDP","text":"While ChromeDevToolsLite provides high-level functions for common operations, you can use send_cdp_message for direct CDP communication when needed:","category":"page"},{"location":"api/cdp/","page":"CDP","title":"CDP","text":"# Connect to Chrome's debugging port\nclient = connect_browser()\n\ntry\n    # Use high-level functions when possible\n    goto(client, \"https://example.com\")\n\n    # For advanced CDP operations, use send_cdp_message\n    result = send_cdp_message(client, \"DOM.getDocument\", Dict())\n    root_node = extract_cdp_result(result)\nfinally\n    close(client)\nend","category":"page"},{"location":"api/cdp/#Error-Handling","page":"CDP","title":"Error Handling","text":"","category":"section"},{"location":"api/cdp/","page":"CDP","title":"CDP","text":"CDP operations may throw various errors. See Error Types in the Types section for details.","category":"page"},{"location":"api/cdp/","page":"CDP","title":"CDP","text":"Note: All CDP operations support verbose logging:","category":"page"},{"location":"api/cdp/","page":"CDP","title":"CDP","text":"send_cdp_message(client, \"DOM.getDocument\", Dict(), verbose=true)","category":"page"},{"location":"api/page/#Page-Navigation-and-Interaction","page":"Page","title":"Page Navigation and Interaction","text":"","category":"section"},{"location":"api/page/","page":"Page","title":"Page","text":"goto\ncontent\nevaluate\nscreenshot","category":"page"},{"location":"api/page/#ChromeDevToolsLite.goto","page":"Page","title":"ChromeDevToolsLite.goto","text":"goto(client::WSClient, url::String; verbose::Bool=false)\n\nNavigate to the specified URL and wait for page load.\n\nArguments\n\nclient::WSClient: The WebSocket client to use\nurl::String: The URL to navigate to\nverbose::Bool: Enable verbose logging (default: false)\n\nThrows\n\nNavigationError: If navigation fails or times out\n\n\n\n\n\n","category":"function"},{"location":"api/page/#ChromeDevToolsLite.content","page":"Page","title":"ChromeDevToolsLite.content","text":"content(client::WSClient; verbose::Bool=false) -> String\n\nGet the HTML content of the current page.\n\nArguments\n\nclient::WSClient: The WebSocket client to use\nverbose::Bool: Enable verbose logging (default: false)\n\nReturns\n\nString: The HTML content of the page\n\n\n\n\n\n","category":"function"},{"location":"api/page/#ChromeDevToolsLite.evaluate","page":"Page","title":"ChromeDevToolsLite.evaluate","text":"evaluate(client::WSClient, expression::String; verbose::Bool=false) -> Any\n\nEvaluate JavaScript in the page context and return the result.\n\nArguments\n\nclient::WSClient: The WebSocket client to use\nexpression::String: JavaScript expression to evaluate\nverbose::Bool: Enable verbose logging (default: false)\n\nReturns\n\nAny: The result of the JavaScript evaluation, or nothing if no value returned\n\nThrows\n\nEvaluationError: If JavaScript evaluation fails\n\n\n\n\n\n","category":"function"},{"location":"api/page/#ChromeDevToolsLite.screenshot","page":"Page","title":"ChromeDevToolsLite.screenshot","text":"screenshot(client::WSClient; verbose::Bool=false) -> String\n\nTake a screenshot of the current page.\n\nArguments\n\nclient::WSClient: The WebSocket client to use\nverbose::Bool: Enable verbose logging (default: false)\n\nReturns\n\nString: Base64 encoded string of the screenshot, or nothing if capture fails\n\n\n\n\n\n","category":"function"},{"location":"api/page/#Navigation","page":"Page","title":"Navigation","text":"","category":"section"},{"location":"api/page/","page":"Page","title":"Page","text":"# Navigate to a URL\ngoto(client, \"https://example.com\")\n\n# Get page content\nhtml = content(client)","category":"page"},{"location":"api/page/#JavaScript-Evaluation","page":"Page","title":"JavaScript Evaluation","text":"","category":"section"},{"location":"api/page/","page":"Page","title":"Page","text":"# Evaluate JavaScript\ntitle = evaluate(client, \"document.title\")\n\n# Evaluate with element handle\nelement = ElementHandle(client, \"#myButton\")\nresult = evaluate_handle(element, \"el => el.textContent\")","category":"page"},{"location":"api/page/#Screenshots","page":"Page","title":"Screenshots","text":"","category":"section"},{"location":"api/page/","page":"Page","title":"Page","text":"# Take a full page screenshot\nscreenshot(client)\n\n# Take element screenshot\nelement = ElementHandle(client, \"header\")\nscreenshot(element)","category":"page"},{"location":"api/page/#Examples","page":"Page","title":"Examples","text":"","category":"section"},{"location":"api/page/","page":"Page","title":"Page","text":"client = connect_browser()\n\ntry\n    # Navigate and interact with page\n    goto(client, \"https://example.com\")\n\n    # Get page title\n    title = evaluate(client, \"document.title\")\n\n    # Find and interact with elements\n    button = ElementHandle(client, \"#submit-button\")\n    click(button)\n\n    # Take screenshot\n    screenshot(client)\nfinally\n    close(client)\nend","category":"page"},{"location":"api/page/#Error-Handling","page":"Page","title":"Error Handling","text":"","category":"section"},{"location":"api/page/","page":"Page","title":"Page","text":"Page operations can throw various exceptions. See Error Types in the Types section for details.","category":"page"},{"location":"api/page/","page":"Page","title":"Page","text":"Note: All operations support a verbose flag for detailed logging:","category":"page"},{"location":"api/page/","page":"Page","title":"Page","text":"goto(client, \"https://example.com\", verbose=true)","category":"page"}]
}
