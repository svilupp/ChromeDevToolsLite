var documenterSearchIndex = {"docs":
[{"location":"getting_started/#Getting-Started-with-ChromeDevToolsLite.jl","page":"Getting Started","title":"Getting Started with ChromeDevToolsLite.jl","text":"","category":"section"},{"location":"getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"ChromeDevToolsLite\")","category":"page"},{"location":"getting_started/#Basic-Usage","page":"Getting Started","title":"Basic Usage","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Here's a simple example that demonstrates the core functionality:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using ChromeDevToolsLite\n\n# Connect to browser (enable verbose mode for debugging)\nclient = connect_browser(verbose=true)\n\ntry\n    # Navigate to a website\n    goto(client, \"https://example.com\")\n\n    # Find and interact with elements using JavaScript\n    evaluate(client, \"\"\"\n        const button = document.querySelector('#submit-button');\n        if (button) button.click();\n\n        const searchInput = document.querySelector('#search');\n        if (searchInput) searchInput.value = 'search query';\n    \"\"\")\n\n    # Take a screenshot\n    screenshot(client, verbose=true)\nfinally\n    # Clean up\n    close(client)\nend","category":"page"},{"location":"getting_started/#Key-Concepts","page":"Getting Started","title":"Key Concepts","text":"","category":"section"},{"location":"getting_started/#Browser-Management","page":"Getting Started","title":"Browser Management","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"A WebSocket connection to Chrome DevTools Protocol\nEach connection can control a Chrome browser instance\nSupports page navigation, JavaScript evaluation, and screenshots","category":"page"},{"location":"getting_started/#Page-Navigation","page":"Getting Started","title":"Page Navigation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Use goto to navigate to URLs\nUse evaluate to run JavaScript code\nUse content to retrieve the page's HTML","category":"page"},{"location":"getting_started/#DOM-Interaction","page":"Getting Started","title":"DOM Interaction","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Interact with elements using JavaScript via evaluate\nQuery elements using standard CSS selectors\nModify element properties and trigger events\nEnable verbose mode for debugging output","category":"page"},{"location":"getting_started/#Debugging","page":"Getting Started","title":"Debugging","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Use verbose flag for detailed logging:\nclient = connect_browser(verbose=true)\nresult = evaluate(client, \"document.querySelector('#button').click()\")\nCheck operation results and error messages\nMonitor browser console output","category":"page"},{"location":"getting_started/#Error-Handling","page":"Getting Started","title":"Error Handling","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The package includes error handling for:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Connection issues\nNavigation failures\nJavaScript evaluation errors","category":"page"},{"location":"getting_started/#Best-Practices","page":"Getting Started","title":"Best Practices","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Always use try-finally for cleanup:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"try\n    # Your code here\nfinally\n    close(client)\nend","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Use verbose mode during development:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Enable verbose mode for detailed logging\nclient = connect_browser(verbose=true)\nresult = evaluate(client, \"\"\"\n    const element = document.querySelector('#slow-element');\n    if (element) element.click();\n\"\"\", verbose=true)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Handle errors gracefully:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"try\n    result = evaluate(client, \"\"\"\n        const element = document.querySelector('#maybe-exists');\n        return element ? element.click() : null;\n    \"\"\")\ncatch e\n    @warn \"Element interaction failed\" exception=e\n    rethrow(e)\nend","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Working with Multiple Elements:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Find and process multiple elements\nelements_data = evaluate(client, \"\"\"\n    const items = document.querySelectorAll('.item');\n    return Array.from(items).map(item => ({\n        visible: window.getComputedStyle(item).display !== 'none',\n        text: item.textContent,\n        testid: item.getAttribute('data-testid')\n    }));\n\"\"\")\nfor item in JSON.parse(elements_data)\n    if item[\"visible\"]\n        println(\"Item $(item[\"testid\"]): $(item[\"text\"])\")\n    end\nend","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Form Interactions:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Fill out a form\nevaluate(client, \"\"\"\n    const nameInput = document.querySelector('#name');\n    if (nameInput) nameInput.value = 'John Doe';\n\n    const colorSelect = document.querySelector('#color');\n    if (colorSelect) colorSelect.value = 'blue';\n\n    const submitButton = document.querySelector('button[type='submit']');\n    if (submitButton) submitButton.click();\n\"\"\")\n\n# Verify submission\nresult = evaluate(client, \"\"\"\n    const resultElement = document.querySelector('#result');\n    return resultElement ? resultElement.textContent : '';\n\"\"\")\n@assert contains(result, \"John Doe\")","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Screenshots:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Full page screenshot\nscreenshot(client, verbose=true)\n\n# Element-specific screenshot (not currently supported)","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This guide showcases practical examples demonstrating ChromeDevToolsLite features. All examples can be found in the examples/ directory.","category":"page"},{"location":"examples/#Basic-Connection","page":"Examples","title":"Basic Connection","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ChromeDevToolsLite\n\nprintln(\"Starting basic connection example...\")\nclient = connect_browser(verbose=true)\n\ntry\n    # Basic navigation\n    goto(client, \"https://example.com\")\n\n    # Get page title using JavaScript\n    title = evaluate(client, \"document.title\")\n    println(\"Page title: $title\")\nfinally\n    close(client)\nend","category":"page"},{"location":"examples/#Page-Operations","page":"Examples","title":"Page Operations","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Get and display page content\nhtml_content = content(client)\nprintln(\"First 100 chars of content: \", html_content[1:min(100, length(html_content))])\n\n# Take a screenshot\nscreenshot(client, verbose=true)\nprintln(\"Screenshot saved (check current directory for 'screenshot.png')\")","category":"page"},{"location":"examples/#Element-Interactions","page":"Examples","title":"Element Interactions","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Fill in form fields\nevaluate(client, \"\"\"\n    document.querySelector('input[name=\"custname\"]').value = 'John Doe';\n    document.querySelector('input[value=\"medium\"]').click();\n    document.querySelector('input[value=\"bacon\"]').click();\n    document.querySelector('textarea[name=\"comments\"]').value = 'Please ring doorbell twice';\n\"\"\")\n\n# Verify inputs\nname = evaluate(client, \"document.querySelector('input[name=\\\"custname\\\"]').value\")\nsize = evaluate(client, \"document.querySelector('input[name=\\\"size\\\"]:checked').value\")","category":"page"},{"location":"examples/#Form-Automation","page":"Examples","title":"Form Automation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Complex form handling with JSON verification\nform_data = evaluate(client, \"\"\"\n    JSON.stringify({\n        name: document.querySelector('input[name=\"custname\"]').value,\n        size: document.querySelector('input[name=\"size\"]:checked').value,\n        toppings: Array.from(document.querySelectorAll('input[name=\"topping\"]:checked'))\n            .map(el => el.value)\n    })\n\"\"\")","category":"page"},{"location":"examples/#Advanced-Automation","page":"Examples","title":"Advanced Automation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Dynamic DOM manipulation\nevaluate(client, \"\"\"\n    // Create new elements\n    const newHeader = document.createElement('h2');\n    newHeader.textContent = 'Dynamically Added Content';\n    document.body.insertBefore(newHeader, document.body.firstChild);\n\n    // Modify existing elements\n    const paragraphs = document.getElementsByTagName('p');\n    Array.from(paragraphs).forEach((p, index) => {\n        p.style.color = index % 2 ? 'blue' : 'green';\n        p.style.padding = '10px';\n    });\n\"\"\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ChromeDevToolsLite","category":"page"},{"location":"#ChromeDevToolsLite","page":"Home","title":"ChromeDevToolsLite","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ChromeDevToolsLite.jl is a minimal Julia package for browser automation using the Chrome DevTools Protocol (CDP). It provides direct access to CDP commands with a lightweight interface.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Direct WebSocket connection to Chrome DevTools Protocol\nPage navigation and JavaScript evaluation\nDOM element selection and manipulation\nMouse and keyboard control\nForm automation capabilities\nScreenshot and page content extraction\nMulti-page handling\nMinimal overhead and dependencies","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using ChromeDevToolsLite\n\n# Connect to Chrome running with --remote-debugging-port=9222\nclient = connect_browser()\n\ntry\n    # Navigate to a page\n    goto(client, \"https://example.com\")\n\n    # Find and interact with elements\n    element = query_selector(client, \"#login-form\")\n\n    # Type text into form\n    input = query_selector(element, \"input[type='text']\")\n    type_text(input, \"username\")\n\n    # Click submit using mouse control\n    submit = query_selector(element, \"button[type='submit']\")\n    click(submit)\n\n    # Take a screenshot\n    screenshot(client)\nfinally\n    close(client)\nend","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Check out our example scripts in the examples/ directory:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Basic Connection (examples/1_basic_connection.jl)\nPage Operations (examples/2_page_operations.jl)\nElement Interactions (examples/3_element_interactions.jl)\nForm Automation (examples/4_form_automation.jl)\nAdvanced Automation (examples/5_advanced_automation.jl)\nMouse and Keyboard Control (examples/6_mouse_keyboard_control.jl)","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the API Reference for detailed documentation of all available functions. ```","category":"page"},{"location":"api/api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api/api/","page":"API Reference","title":"API Reference","text":"Modules = [ChromeDevToolsLite]","category":"page"},{"location":"api/api/#ChromeDevToolsLite.ChromeDevToolsLite","page":"API Reference","title":"ChromeDevToolsLite.ChromeDevToolsLite","text":"ChromeDevToolsLite\n\nA lightweight Julia implementation of Chrome DevTools Protocol client.\n\nFeatures\n\nBrowser automation and control via Chrome DevTools Protocol\nElement interaction and manipulation\nPage navigation and JavaScript evaluation\nScreenshot capture\n\nConfiguration\n\nAll functions accept a verbose flag to control logging output:\n\nverbose=true: Enables detailed logging with @info and @debug messages\nverbose=false (default): Suppresses informational logging\n\nExample:\n\nclient = connect_browser(verbose=true)\nelement = ElementHandle(client, \"#my-button\", verbose=true)\nclick(element)\n\n\n\n\n\n","category":"module"},{"location":"api/api/#ChromeDevToolsLite.Browser","page":"API Reference","title":"ChromeDevToolsLite.Browser","text":"Browser\n\nAlias for WSClient.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#ChromeDevToolsLite.ConnectionError","page":"API Reference","title":"ChromeDevToolsLite.ConnectionError","text":"ConnectionError\n\nThrown when there are issues with the WebSocket connection.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#ChromeDevToolsLite.ElementHandle","page":"API Reference","title":"ChromeDevToolsLite.ElementHandle","text":"ElementHandle\n\nRepresents a handle to a DOM element in the browser.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#ChromeDevToolsLite.ElementNotFoundError","page":"API Reference","title":"ChromeDevToolsLite.ElementNotFoundError","text":"ElementNotFoundError\n\nThrown when an element cannot be found in the DOM using the specified selector.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#ChromeDevToolsLite.EvaluationError","page":"API Reference","title":"ChromeDevToolsLite.EvaluationError","text":"EvaluationError\n\nThrown when JavaScript evaluation in the browser fails.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#ChromeDevToolsLite.NavigationError","page":"API Reference","title":"ChromeDevToolsLite.NavigationError","text":"NavigationError\n\nThrown when a page navigation fails or times out.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#ChromeDevToolsLite.Page","page":"API Reference","title":"ChromeDevToolsLite.Page","text":"Page\n\nRepresents a browser page/tab with its associated WebSocket client.\n\nFields\n\nclient::WSClient: The WebSocket client for communication\ntarget_id::String: The unique identifier for this page/tab\nextras::Dict{String, Any}: Additional page metadata refreshed on demand. It might be stale/inaccurate - run update_page! to refresh it.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#ChromeDevToolsLite.TimeoutError","page":"API Reference","title":"ChromeDevToolsLite.TimeoutError","text":"TimeoutError\n\nThrown when an operation exceeds its time limit.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#ChromeDevToolsLite.WSClient","page":"API Reference","title":"ChromeDevToolsLite.WSClient","text":"WSClient\n\nWebSocket client for Chrome DevTools Protocol communication.\n\nFields\n\nws::Union{WebSocket, Nothing}: The WebSocket connection or nothing if not connected\nws_url::String: The WebSocket URL to connect to\nis_connected::Bool: Connection status flag\nmessage_channel::Channel{Dict{String, Any}}: Channel for message communication\nnext_id::Int: Counter for message IDs\npage_loaded::Bool: Flag indicating if the page has finished loading\nendpoint::String: The debugging endpoint URL\n\n\n\n\n\n","category":"type"},{"location":"api/api/#Base.close-Tuple{Page}","page":"API Reference","title":"Base.close","text":"close(page::Page)\n\nClose the page/target without closing its WebSocket client. Returns true if the target was successfully closed.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#Base.close-Tuple{WSClient}","page":"API Reference","title":"Base.close","text":"Base.close(client::WSClient)\n\nClose the WebSocket connection and clean up resources.\n\nArguments\n\nclient::WSClient: The WebSocket client to close\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.check-Tuple{ElementHandle}","page":"API Reference","title":"ChromeDevToolsLite.check","text":"check(element::ElementHandle; options=Dict())\n\nCheck a checkbox or radio button element.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.click-Tuple{ElementHandle}","page":"API Reference","title":"ChromeDevToolsLite.click","text":"click(element::ElementHandle; options=Dict())\n\nClick an element.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.click-Tuple{WSClient}","page":"API Reference","title":"ChromeDevToolsLite.click","text":"click(client::WSClient; button::String = \"left\", x::Union{Int, Nothing} = nothing,\n    y::Union{Int, Nothing} = nothing, modifiers::Vector{String} = String[], verbose::Bool = false)\n\nPerform a mouse click action at the specified coordinates or current mouse position.\n\nArguments\n\nclient::WSClient: The WebSocket client to perform the action on\nbutton::String=\"left\": Mouse button to click (\"left\", \"right\", \"middle\")\nx::Union{Int,Nothing}=nothing: Optional x-coordinate for the click\ny::Union{Int,Nothing}=nothing: Optional y-coordinate for the click\nmodifiers::Vector{String}=String[]: Keyboard modifiers (e.g., [\"Shift\", \"Control\"])\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.connect!-Tuple{WSClient}","page":"API Reference","title":"ChromeDevToolsLite.connect!","text":"connect!(client::WSClient; max_retries::Int = MAX_RETRIES,\n    retry_delay::Real = RETRY_DELAY,  timeout::Real = CONNECTION_TIMEOUT, verbose::Bool = false)\n\nConnect to Chrome DevTools Protocol WebSocket endpoint. Returns the connected client.\n\nArguments\n\nmax_retries::Int: The maximum number of retries to establish the connection.\nretry_delay::Real: The delay between retries in seconds.\ntimeout::Real: The timeout for the connection in seconds.\nverbose::Bool: Whether to print verbose debug information.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.connect_browser","page":"API Reference","title":"ChromeDevToolsLite.connect_browser","text":"connect_browser(\n    endpoint::String = \"http://localhost:9222\";\n    max_retries::Int = MAX_RETRIES,\n    retry_delay::Real = RETRY_DELAY,\n    timeout::Real = CONNECTION_TIMEOUT,\n    verbose::Bool = false\n\n)\n\nConnects to Chrome browser at the given debugging endpoint with enhanced error handling. Returns a WSClient connected to a new page.\n\nArguments\n\nendpoint::String: The URL of the Chrome debugging endpoint. Eg, http://localhost:9222.\nmax_retries::Int: The maximum number of retries to check for Chrome.\nretry_delay::Real: The delay between retries in seconds.\ntimeout::Real: The timeout for the connection in seconds.\nverbose::Bool: Whether to print verbose debug information.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#ChromeDevToolsLite.content-Tuple{WSClient}","page":"API Reference","title":"ChromeDevToolsLite.content","text":"content(client::WSClient; verbose::Bool=false) -> String\n\nGet the HTML content of the current page.\n\nArguments\n\nclient::WSClient: The WebSocket client to use\nverbose::Bool: Enable verbose logging (default: false)\n\nReturns\n\nString: The HTML content of the page\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.dblclick-Tuple{WSClient}","page":"API Reference","title":"ChromeDevToolsLite.dblclick","text":"dblclick(client::WSClient; x::Union{Int, Nothing} = nothing,\n    y::Union{Int, Nothing} = nothing, verbose::Bool = false)\n\nPerform a double-click action at the specified coordinates or current mouse position.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.ensure_browser_available-Tuple{String}","page":"API Reference","title":"ChromeDevToolsLite.ensure_browser_available","text":"ensure_browser_available(\n    endpoint::String;\n    max_retries::Int = MAX_RETRIES,\n    retry_delay::Real = RETRY_DELAY,\n    verbose::Bool = false\n\n)\n\nChecks if Chrome is running in debug mode on the specified endpoint. Retries up to max_retries times with specified retry_delay between attempts. Returns true if Chrome is responding on the debug port.\n\nArguments\n\nendpoint::String: The URL of the Chrome debugging endpoint. Eg, http://localhost:9222.\nmax_retries::Int: The maximum number of retries to check for Chrome.\nretry_delay::Real: The delay between retries in seconds.\nverbose::Bool: Whether to print verbose debug information.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.evaluate-Tuple{WSClient, String}","page":"API Reference","title":"ChromeDevToolsLite.evaluate","text":"evaluate(client::WSClient, expression::String; verbose::Bool=false) -> Any\n\nEvaluate JavaScript in the page context and return the result.\n\nArguments\n\nclient::WSClient: The WebSocket client to use\nexpression::String: JavaScript expression to evaluate\nverbose::Bool: Enable verbose logging (default: false)\n\nReturns\n\nAny: The result of the JavaScript evaluation, or nothing if no value returned\n\nThrows\n\nEvaluationError: If JavaScript evaluation fails\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.evaluate_handle-Tuple{ElementHandle, String}","page":"API Reference","title":"ChromeDevToolsLite.evaluate_handle","text":"evaluate_handle(element::ElementHandle, expression::String) -> Any\n\nEvaluate JavaScript expression in the context of the element. Assumed the element is variable el.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.evaluate_handle-Tuple{WSClient, String}","page":"API Reference","title":"ChromeDevToolsLite.evaluate_handle","text":"evaluate_handle(client::WSClient, expression::String; verbose::Bool=false) -> Any\n\nEvaluate JavaScript in the page context and return a handle to the result. Useful for evaluating expressions that return DOM elements or complex objects.\n\nArguments\n\nclient::WSClient: The WebSocket client to use\nexpression::String: JavaScript expression to evaluate\nverbose::Bool: Enable verbose logging (default: false)\n\nReturns\n\nAny: A handle to the evaluated result, typically a Dict containing object reference\n\nThrows\n\nEvaluationError: If JavaScript evaluation fails\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.extract_cdp_result","page":"API Reference","title":"ChromeDevToolsLite.extract_cdp_result","text":"extract_cdp_result(response::Dict, path::Vector{String}=[\"result\", \"result\", \"value\"])\n\nExtract values from CDP responses with configurable path traversal. Returns the extracted value or nothing if the path doesn't exist.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#ChromeDevToolsLite.extract_element_result-Tuple{Dict}","page":"API Reference","title":"ChromeDevToolsLite.extract_element_result","text":"extract_element_result(response::Dict)\n\nExtract element-specific results from CDP responses.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.get_all_pages-Tuple{WSClient}","page":"API Reference","title":"ChromeDevToolsLite.get_all_pages","text":"get_all_pages(client::WSClient) -> Vector{Page}\n\nGet all available browser pages/targets using Target.getTargets CDP command.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.get_attribute-Tuple{ElementHandle, String}","page":"API Reference","title":"ChromeDevToolsLite.get_attribute","text":"get_attribute(element::ElementHandle, name::String) -> Union{String, Nothing}\n\nGet the value of an attribute on an element.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.get_element_info-Tuple{Page, String}","page":"API Reference","title":"ChromeDevToolsLite.get_element_info","text":"get_element_info(page::Page, selector::String) -> Dict{String, Any}\n\nGet detailed information about the first element matching the selector.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.get_element_position-Tuple{WSClient, String}","page":"API Reference","title":"ChromeDevToolsLite.get_element_position","text":"get_element_position(ws_client::WSClient, element_handle::String)\n\nGet the position of an element on the page.\n\nArguments\n\nws_client::WSClient: The WebSocket client connection\nelement_handle::String: CSS selector for the target element\n\nReturns\n\nNamedTuple with x and y coordinates of the element's center\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.get_key_info-Tuple{Any}","page":"API Reference","title":"ChromeDevToolsLite.get_key_info","text":"Translates the key into codes and keycodes where possible\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.get_mouse_position-Tuple{WSClient}","page":"API Reference","title":"ChromeDevToolsLite.get_mouse_position","text":"get_mouse_position(client::WSClient)\n\nGet the current mouse cursor position.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.get_or_create_page_target-Tuple{String}","page":"API Reference","title":"ChromeDevToolsLite.get_or_create_page_target","text":"get_or_create_page_target(endpoint::String; verbose::Bool = false)\n\nRetrieves an available page target or creates a new one if none are available. Returns the target dictionary containing details like id and webSocketDebuggerUrl.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.get_page-Tuple{WSClient}","page":"API Reference","title":"ChromeDevToolsLite.get_page","text":"get_page(client::WSClient) -> Page\n\nGet the current page associated with the WebSocket client. If no page exists, creates a new one.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.get_page_info-Tuple{Page}","page":"API Reference","title":"ChromeDevToolsLite.get_page_info","text":"get_page_info(page::Page) -> Dict{String, Any}\n\nGet the latest page metadata by updating the page and returning extras.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.get_target_info-Tuple{Page}","page":"API Reference","title":"ChromeDevToolsLite.get_target_info","text":"get_target_info(page::Page) -> Dict{String, Any}\n\nGet information about the current target (page) using CDP command Target.getTargetInfo.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.get_text-Tuple{ElementHandle}","page":"API Reference","title":"ChromeDevToolsLite.get_text","text":"get_text(element::ElementHandle)\n\nGet the text content of an element.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.get_viewport-Tuple{Page}","page":"API Reference","title":"ChromeDevToolsLite.get_viewport","text":"get_viewport(page::Page) -> Dict{String, Any}\n\nGet the current viewport metrics using Page.getLayoutMetrics.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.goto-Tuple{Page, String}","page":"API Reference","title":"ChromeDevToolsLite.goto","text":"goto(page::Page, url::String; verbose::Bool=false)\n\nNavigate to the specified URL and wait for page load.\n\nArguments\n\npage::Page: The page to navigate\nurl::String: The URL to navigate to\nverbose::Bool: Enable verbose logging (default: false)\n\nThrows\n\nNavigationError: If navigation fails or times out\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.goto-Tuple{WSClient, String}","page":"API Reference","title":"ChromeDevToolsLite.goto","text":"goto(client::WSClient, url::String; verbose::Bool=false)\n\nNavigate to the specified URL and wait for page load.\n\nArguments\n\nclient::WSClient: The WebSocket client to use\nurl::String: The URL to navigate to\nverbose::Bool: Enable verbose logging (default: false)\n\nThrows\n\nNavigationError: If navigation fails or times out\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.handle_event-Tuple{WSClient, Dict}","page":"API Reference","title":"ChromeDevToolsLite.handle_event","text":"handle_event(client::WSClient, event::Dict)\n\nProcess CDP events.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.is_connected-Tuple{HTTP.WebSockets.WebSocket}","page":"API Reference","title":"ChromeDevToolsLite.is_connected","text":"is_connected(ws::WebSocket)\n\nCheck if the WebSocket connection is still active.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.is_visible-Tuple{ElementHandle}","page":"API Reference","title":"ChromeDevToolsLite.is_visible","text":"is_visible(element::ElementHandle) -> Bool\n\nCheck if an element is visible.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.move_mouse","page":"API Reference","title":"ChromeDevToolsLite.move_mouse","text":"move_mouse(client::WSClient, x::Int, y::Int)\n\nMove the mouse cursor to the specified coordinates.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#ChromeDevToolsLite.new_context-Tuple{WSClient}","page":"API Reference","title":"ChromeDevToolsLite.new_context","text":"new_context(\n    client::WSClient; viewport::Dict{String, Any} = Dict(), user_agent::String = \"\")\n\nCreate a new browser context with optional viewport and user agent settings.\n\nNote: Requires for the Chrome to be launched with --enable-features=NetworkService,NetworkServiceInProcess\n\nExample\n\nclient = connect_browser()\ncontext = new_context(client,\n    viewport=Dict(\"width\" => 1920, \"height\" => 1080),\n    user_agent=\"Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X)\")\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.new_page","page":"API Reference","title":"ChromeDevToolsLite.new_page","text":"new_page(client::WSClient) -> Page\n\nCreate and return a new page in the current browser context.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#ChromeDevToolsLite.press_key-Tuple{WSClient, String}","page":"API Reference","title":"ChromeDevToolsLite.press_key","text":"press_key(client::WSClient, key::String; modifiers::Vector{String} = String[],\n    verbose::Bool = false)\n\nPress and release a keyboard key.\n\nArguments\n\nclient::WSClient: The WebSocket client to perform the action on\nkey::String: Key to press (e.g., \"a\", \"Enter\", \"ArrowUp\")\nmodifiers::Vector{String}=String[]: Keyboard modifiers (e.g., [\"Shift\", \"Control\"])\nverbose::Bool=false: Whether to print verbose output\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.query_selector-Tuple{Page, String}","page":"API Reference","title":"ChromeDevToolsLite.query_selector","text":"query_selector(page::Page, selector::String) -> Union{Dict, Nothing}\n\nFind the first element matching the given selector using DOM.querySelector.\n\nIf found, returns the \"nodeId\" value, otherwise returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.query_selector_all-Tuple{Page, String}","page":"API Reference","title":"ChromeDevToolsLite.query_selector_all","text":"query_selector_all(page::Page, selector::String) -> Vector{Int}\n\nFind all elements matching the given selector using DOM.querySelectorAll.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.screenshot-Tuple{WSClient}","page":"API Reference","title":"ChromeDevToolsLite.screenshot","text":"screenshot(client::WSClient; verbose::Bool=false) -> String\n\nTake a screenshot of the current page.\n\nArguments\n\nclient::WSClient: The WebSocket client to use\nsave_path::String: Path to save the screenshot file (default: empty string). If not empty, the screenshot is saved to the specified path.\nverbose::Bool: Enable verbose logging (default: false)\n\nReturns\n\nString: Base64 encoded string of the screenshot, or nothing if capture fails\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.select_option-Tuple{ElementHandle, String}","page":"API Reference","title":"ChromeDevToolsLite.select_option","text":"select_option(element::ElementHandle, value::String; options=Dict())\n\nSelect an option in a select element by value.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.send_cdp","page":"API Reference","title":"ChromeDevToolsLite.send_cdp","text":"send_cdp(\n    client::WSClient, method::String, params::Dict = Dict();\n    increment_id::Bool = true, timeout::Real = CONNECTION_TIMEOUT)\n\nSend a Chrome DevTools Protocol message and wait for the response.\n\nArguments\n\nclient::WSClient: The WebSocket client to use\nmethod::String: The CDP method to call (e.g., \"Page.navigate\")\nparams::Dict: Parameters for the CDP method (default: empty Dict)\nincrement_id::Bool: Whether to increment the message ID counter (default: true)\ntimeout::Real: The timeout for the response in seconds (default: CONNECTION_TIMEOUT)\n\nReturns\n\nDict: The CDP response message\n\nThrows\n\nTimeoutError: If response times out\n\n\n\n\n\n","category":"function"},{"location":"api/api/#ChromeDevToolsLite.set_viewport!-Tuple{Page}","page":"API Reference","title":"ChromeDevToolsLite.set_viewport!","text":"set_viewport!(page::Page; width::Int=1280, height::Int=720, device_scale_factor::Float64=1.0,\n            mobile::Bool=false) -> Nothing\n\nSet viewport metrics using Emulation.setDeviceMetricsOverride.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.start_message_handler-Tuple{WSClient}","page":"API Reference","title":"ChromeDevToolsLite.start_message_handler","text":"start_message_handler(client::WSClient)\n\nStart an asynchronous task to handle incoming WebSocket messages.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.try_connect-Tuple{WSClient}","page":"API Reference","title":"ChromeDevToolsLite.try_connect","text":"try_connect(client::WSClient; max_retries::Int = MAX_RETRIES,\n    retry_delay::Real = RETRY_DELAY, timeout::Real = CONNECTION_TIMEOUT,\n    verbose::Bool = false)\n    retry_delay::Real = RETRY_DELAY, verbose::Bool = false)\n\nAttempt to establish a WebSocket connection with retry logic and timeout.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.type_text-Tuple{ElementHandle, String}","page":"API Reference","title":"ChromeDevToolsLite.type_text","text":"type_text(element::ElementHandle, text::String; options=Dict())\n\nType text into an element using JavaScript.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.type_text-Tuple{WSClient, String}","page":"API Reference","title":"ChromeDevToolsLite.type_text","text":"type_text(client::WSClient, text::String; modifiers::Vector{String} = String[],\n    verbose::Bool = false)\n\nType text by simulating keyboard input for each character.\n\nArguments\n\nclient::WSClient: The WebSocket client to perform the action on\ntext::String: Text to type\nmodifiers::Vector{String}=String[]: Keyboard modifiers (e.g., [\"Shift\", \"Control\"])\nverbose::Bool=false: Whether to print verbose output\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.uncheck-Tuple{ElementHandle}","page":"API Reference","title":"ChromeDevToolsLite.uncheck","text":"uncheck(element::ElementHandle; options=Dict())\n\nUncheck a checkbox element.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.update_page!-Tuple{Page}","page":"API Reference","title":"ChromeDevToolsLite.update_page!","text":"update_page!(page::Page) -> Page\n\nUpdate page metadata using Target.getTargetInfo and save to page extras.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.wait_for_event-Tuple{WSClient, String}","page":"API Reference","title":"ChromeDevToolsLite.wait_for_event","text":"wait_for_event(client::WSClient, event_name::String; timeout::Float64=5.0) -> Union{Dict, Nothing}\n\nWait for a specific CDP event to occur.\n\nArguments\n\nclient::WSClient: The WebSocket client to use\nevent_name::String: Name of the event to wait for\ntimeout::Float64: Maximum time to wait in seconds (default: 5.0)\n\nReturns\n\nDict: The event data if received\nNothing: If timeout occurs or error happens\n\nNotes\n\nUsed internally for synchronizing page operations\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.wait_for_ready_state-Tuple{WSClient}","page":"API Reference","title":"ChromeDevToolsLite.wait_for_ready_state","text":"wait_for_ready_state(client::WSClient; retry_delay::Real = 0.3,\n    timeout::Real = 10)\n\nWait for the document ready state to be complete. Throws a TimeoutError if the timeout is reached.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.wait_for_visible-Tuple{ElementHandle}","page":"API Reference","title":"ChromeDevToolsLite.wait_for_visible","text":"wait_for_visible(element::ElementHandle; retry_delay::Real = 0.3,\n    timeout::Real = 10, visible::Bool = true)\n\nWait for an element to be visible, unless visible is false (=\"invisible\" element). Throws a TimeoutError if the timeout is reached.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#ChromeDevToolsLite.with_retry-Tuple{Function}","page":"API Reference","title":"ChromeDevToolsLite.with_retry","text":"with_retry(f::Function; max_retries::Int = MAX_RETRIES, retry_delay::Real = RETRY_DELAY, verbose::Bool = false)\n\nExecutes the function f with retry logic. It will attempt to execute f up to max_retries times, waiting retry_delay seconds between attempts.\n\nArguments\n\nf::Function: The function to execute with retries.\nmax_retries::Int: The maximum number of retries.\nretry_delay::Real: The delay between retries in seconds.\nverbose::Bool: Whether to print verbose debug information.\n\nReturns\n\nThe result of executing f if successful.\n\nThrows\n\nThe last exception encountered if all retries fail.\n\n\n\n\n\n","category":"method"}]
}
